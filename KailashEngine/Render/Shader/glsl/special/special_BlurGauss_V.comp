
layout (local_size_x = 1024) in;


uniform sampler2D sampler0;				// Source Texture
writeonly uniform image2D sampler1;		// Destination Texture


shared vec3 cache[gl_WorkGroupSize.x * 2];


uniform int flip;
uniform int blur_amount;
uniform vec2 texture_size;


void main() 
{
	uint id = gl_LocalInvocationID.x;

	ivec2 texCoord_1 = ivec2(gl_WorkGroupID.x, id * 2);
	ivec2 texCoord_2 = ivec2(gl_WorkGroupID.x, id * 2 + 1);
	
	cache[id * 2] = texelFetch(sampler0, texCoord_1, 0).xyz;
	cache[id * 2 + 1] = texelFetch(sampler0, texCoord_2, 0).xyz;

	if(id * 2 > texture_size.y)
	{
		imageStore(sampler1, texCoord_1, vec4(0.0));
		imageStore(sampler1, texCoord_2, vec4(0.0));
		return;
	}

	barrier();
	memoryBarrierShared();

	
	float SIGMA = float(blur_amount) / 9.7;
	float SIGMA_2 = SIGMA * SIGMA;

	vec3 guass_increment;
	guass_increment.x = 1.0 / (sqrt(MATH_2_PI) * SIGMA);
	guass_increment.y = exp(-0.5 / SIGMA_2);
	guass_increment.z = guass_increment.y * guass_increment.y;
	
	
	vec3 output_1 = cache[texCoord_1.y] * guass_increment.x;
	vec3 output_2 = cache[texCoord_2.y] * guass_increment.x;

	float increment_sum = guass_increment.x;
	guass_increment.xy *= guass_increment.yz;



	for (int i = 1; i < blur_amount; i++)
	{
		int index = i;

		output_1 += cache[texCoord_1.y + index] * guass_increment.x;
		output_1 += cache[texCoord_1.y - index] * guass_increment.x;

		output_2 += cache[texCoord_2.y + index] * guass_increment.x;
		output_2 += cache[texCoord_2.y - index] * guass_increment.x;

		increment_sum += 2.0 * guass_increment.x;
		guass_increment.xy *= guass_increment.yz;
	}

	output_1 /= increment_sum;
	output_2 /= increment_sum;

	imageStore(sampler1, texCoord_1, vec4(output_1, 1.0));
	imageStore(sampler1, texCoord_2, vec4(output_2, 1.0));
}
