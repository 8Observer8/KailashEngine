

#define DIRECTION 5


layout (local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

uniform int source_mip_level;

uniform sampler3D sampler0;
writeonly uniform image3D sampler1;


void main()
{
	ivec3 dstSize = imageSize(sampler1);
	
	if (gl_GlobalInvocationID.x >= dstSize.x
		|| gl_GlobalInvocationID.y >= dstSize.y
		|| gl_GlobalInvocationID.z >= dstSize.z)
	{
		// out of range, ignore
		// beware barrier() instructions below due to these threads
	}
	else
	{
		ivec3 dstPos = ivec3(gl_GlobalInvocationID);
		ivec3 srcPos = dstPos * 2;
		
		vec4 srcColor0 = texelFetch(sampler0, srcPos + ivec3(0, 0, 0), source_mip_level);
		vec4 srcColor1 = texelFetch(sampler0, srcPos + ivec3(1, 0, 0), source_mip_level);
		vec4 srcColor2 = texelFetch(sampler0, srcPos + ivec3(0, 1, 0), source_mip_level);
		vec4 srcColor3 = texelFetch(sampler0, srcPos + ivec3(1, 1, 0), source_mip_level);
		vec4 srcColor4 = texelFetch(sampler0, srcPos + ivec3(0, 0, 1), source_mip_level);
		vec4 srcColor5 = texelFetch(sampler0, srcPos + ivec3(1, 0, 1), source_mip_level);
		vec4 srcColor6 = texelFetch(sampler0, srcPos + ivec3(0, 1, 1), source_mip_level);
		vec4 srcColor7 = texelFetch(sampler0, srcPos + ivec3(1, 1, 1), source_mip_level);
		
		vec4 outColor = vec4(0.0);
	
		outColor =
				srcColor4 + srcColor0
			+ srcColor5 + srcColor1
			+ srcColor6 + srcColor2
			+ srcColor7 + srcColor3;

		outColor /= 8.0;
		
		imageStore(sampler1, dstPos, outColor);
	}
}
