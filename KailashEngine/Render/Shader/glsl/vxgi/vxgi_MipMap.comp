

#define DIRECTION 5


layout (local_size_x = 16, local_size_y = 8, local_size_z = 1) in;


uniform int source_mip_level;
uniform int direction;

uniform sampler3D sampler0;
writeonly uniform image3D sampler1;


void main()
{
	ivec3 dstSize = imageSize(sampler1);
	
	if (gl_GlobalInvocationID.x >= dstSize.x
		|| gl_GlobalInvocationID.y >= dstSize.y
		|| gl_GlobalInvocationID.z >= dstSize.z)
	{
		// out of range, ignore
		// beware barrier() instructions below due to these threads
	}
	else
	{
		ivec3 dstPos = ivec3(gl_GlobalInvocationID);
		ivec3 srcPos = dstPos * 2;
		
		vec4 srcColor0 = texelFetch(sampler0, srcPos + ivec3(0, 0, 0), source_mip_level);
		vec4 srcColor1 = texelFetch(sampler0, srcPos + ivec3(1, 0, 0), source_mip_level);
		vec4 srcColor2 = texelFetch(sampler0, srcPos + ivec3(0, 1, 0), source_mip_level);
		vec4 srcColor3 = texelFetch(sampler0, srcPos + ivec3(1, 1, 0), source_mip_level);
		vec4 srcColor4 = texelFetch(sampler0, srcPos + ivec3(0, 0, 1), source_mip_level);
		vec4 srcColor5 = texelFetch(sampler0, srcPos + ivec3(1, 0, 1), source_mip_level);
		vec4 srcColor6 = texelFetch(sampler0, srcPos + ivec3(0, 1, 1), source_mip_level);
		vec4 srcColor7 = texelFetch(sampler0, srcPos + ivec3(1, 1, 1), source_mip_level);
		
		srcColor0 *= srcColor0.w;
		srcColor1 *= srcColor1.w;
		srcColor2 *= srcColor2.w;
		srcColor3 *= srcColor3.w;
		srcColor4 *= srcColor4.w;
		srcColor5 *= srcColor5.w;
		srcColor6 *= srcColor6.w;
		srcColor7 *= srcColor7.w;
		
		// color values are stored with premultiplied alpha
		// so, the blending here assumes inputs are premultiplied,
		// and produces a premultiplied output
		
		vec4 outColor = vec4(0.0);

		switch (int(direction))
		{
			case 0:
				// +X
				outColor =
					  srcColor0 + srcColor1 * (1.0 - srcColor0.w)
					+ srcColor2 + srcColor3 * (1.0 - srcColor2.w)
					+ srcColor4 + srcColor5 * (1.0 - srcColor4.w)
					+ srcColor6 + srcColor7 * (1.0 - srcColor6.w);
				break;
			case 1:
				// -X
				outColor =
					  srcColor1 + srcColor0 * (1.0 - srcColor1.w)
					+ srcColor3 + srcColor2 * (1.0 - srcColor3.w)
					+ srcColor5 + srcColor4 * (1.0 - srcColor5.w)
					+ srcColor7 + srcColor6 * (1.0 - srcColor7.w);
				break;
			case 2:
				// +Y
				outColor =
					  srcColor0 + srcColor2 * (1.0 - srcColor0.w)
					+ srcColor1 + srcColor3 * (1.0 - srcColor1.w)
					+ srcColor4 + srcColor6 * (1.0 - srcColor4.w)
					+ srcColor5 + srcColor7 * (1.0 - srcColor5.w);
				break;
			case 3:
				// -Y
				outColor =
					  srcColor2 + srcColor0 * (1.0 - srcColor2.w)
					+ srcColor3 + srcColor1 * (1.0 - srcColor3.w)
					+ srcColor6 + srcColor4 * (1.0 - srcColor6.w)
					+ srcColor7 + srcColor5 * (1.0 - srcColor7.w);
				break;
			case 4:
				// +Z
				outColor =
					  srcColor0 + srcColor4 * (1.0 - srcColor0.w)
					+ srcColor1 + srcColor5 * (1.0 - srcColor1.w)
					+ srcColor2 + srcColor6 * (1.0 - srcColor2.w)
					+ srcColor3 + srcColor7 * (1.0 - srcColor3.w);
				break;
			case 5:
				// -Z
				outColor =
					  srcColor4 + srcColor0 * (1.0 - srcColor4.w)
					+ srcColor5 + srcColor1 * (1.0 - srcColor5.w)
					+ srcColor6 + srcColor2 * (1.0 - srcColor6.w)
					+ srcColor7 + srcColor3 * (1.0 - srcColor7.w);
				break;
			default:
				break;
		}

		outColor *= .25;
		
		imageStore(sampler1, dstPos, outColor);
	}
}
