
layout (local_size_x = 32, local_size_y = 32) in;


//layout(r32ui) coherent volatile uniform uimage3D sampler0;		// Voxel Volume
layout(rgba8) uniform image3D sampler0;		// Voxel Volume
uniform sampler3D sampler1;		// Voxel Volume - Diffuse

uniform sampler2DArray sampler2;		// Shadow Depth
writeonly uniform image2D sampler3;		// Test Texture


uniform vec2 texture_size;

uniform float vx_volume_dimensions;
uniform float vx_volume_scale;
uniform vec3 vx_volume_position;


uniform int light_shadow_id;


void main() 
{
	//------------------------------------------------------
	// Get Voxel Texture Coords
	//------------------------------------------------------
	ivec2 i_TexCoord = ivec2(gl_GlobalInvocationID.xy);
	vec2 t_TexCoord = i_TexCoord / texture_size;

	vec2 depth_packed = texture(sampler2, vec3(t_TexCoord, light_shadow_id)).xy;
	float depth = unpack2(depth_packed);


	vec4 position_falloff = shadow_data[light_shadow_id].position_falloff;
	vec4 color_intensity = shadow_data[light_shadow_id].color_intensity;
	vec3 light_direction = shadow_data[light_shadow_id].direction.xyz;
	vec2 spot_angle_blur = shadow_data[light_shadow_id].spot_angle_blur.xy;

	vec3 world_position = vec3(0.0);
	vec3 volume_TexCoord = calcVoxelTexCoord(
		t_TexCoord, depth,
		-position_falloff.xyz, shadow_data[light_shadow_id].viewray,
		vx_volume_position, vx_volume_dimensions, vx_volume_scale,
		world_position);


	// Albedo Diffuse
	vec4 diffuse = texelFetch(sampler1, ivec3(volume_TexCoord), 0);


	//------------------------------------------------------
	// Lighting
	//------------------------------------------------------

	// Light to Object Direction
	vec3 L = vec3(0.0);

	float attenuation = calcAttenuation(color_intensity.a, position_falloff.a, position_falloff.xyz, world_position, L);

	vec3 voxel_color = color_intensity.xyz * diffuse.xyz * attenuation;
	voxel_color = voxel_color * calcSpotLightCone(L, light_direction, spot_angle_blur.x, spot_angle_blur.y);

	vec4 final = vec4(voxel_color, ceil(diffuse.a) * 1.0);

	// Debugging
	imageStore(sampler3, i_TexCoord, vec4(world_position, 1.0));
	if(dot(voxel_color,voxel_color) > 0)
	{

		//------------------------------------------------------
		// Store in Voxel Volume
		//------------------------------------------------------
		
		vec4 current_color = imageLoad(sampler0, ivec3(volume_TexCoord));

		final.rgb = current_color.rgb + final.rgb;
		final.a = max(current_color.a, final.a);

		imageStore(sampler0, ivec3(volume_TexCoord), final);

		//imageAtomicAverageRGBA8(sampler0, ivec3(volume_TexCoord), final);

	}

}