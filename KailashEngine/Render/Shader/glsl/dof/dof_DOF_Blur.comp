
layout (local_size_x = 512) in;


uniform sampler2D sampler0;				// Source Texture
writeonly uniform image2D sampler1;		// Destination Texture
uniform sampler2D sampler2;				// COC


shared vec4 cache[gl_WorkGroupSize.x];


uniform int counter;
uniform int direction_selector;
uniform vec2 texture_size;

uniform float max_blur;

int fragmentation = 2;


void gaussian() 
{
	uint id = gl_LocalInvocationID.x;

	ivec2 texCoord = ivec2(id * fragmentation + counter, gl_WorkGroupID.x);

	// Swizzle with uniform so we don't have to branch
	texCoord = ivec2(texCoord[direction_selector], texCoord[abs(direction_selector-1)]);
	float texture_size_early_out = texture_size[direction_selector];

	// Store scene in xyz and coc in w
	cache[id] = vec4(texture(sampler0, texCoord / texture_size).xyz, texture(sampler2, texCoord / texture_size).r);
	
	barrier();
	memoryBarrierShared();

	if(id > texture_size_early_out / fragmentation)
	{
		imageStore(sampler1, texCoord, vec4(0.0));
		return;
	}

	float coc = cache[id].a / 2.0;
	coc = min(coc * max_blur, max_blur / 2.0);
	int num_samples = int(ceil(coc));

	if(num_samples <= 0)
	{
		imageStore(sampler1, texCoord, vec4(cache[id].xyz,1.0));
		return;
	}
	
	float SIGMA = float(num_samples) / 18.7;
	float SIGMA_2 = SIGMA * SIGMA;

	vec3 guass_increment;
	guass_increment.x = 1.0 / (sqrt(MATH_2_PI) * SIGMA);
	guass_increment.y = exp(-0.5 / SIGMA_2);
	guass_increment.z = guass_increment.y * guass_increment.y;
	
	vec3 final = cache[id].xyz * guass_increment.x;

	float increment_sum = guass_increment.x;
	guass_increment.xy *= guass_increment.yz;


	for (int i = 1; i < num_samples; i++)
	{
		int index = i;
		ivec2 samplerCoord = ivec2(id + index, id - index);

		final += (
			(cache[samplerCoord.x].xyz * guass_increment.x) + 
			(cache[samplerCoord.y].xyz * guass_increment.x)
		);


		increment_sum += 2.0 * guass_increment.x;
		guass_increment.xy *= guass_increment.yz;

	}

	final /= increment_sum;

	imageStore(sampler1, texCoord, vec4(final, 1.0));

}

void box()
{
	uint id = gl_LocalInvocationID.x;

	ivec2 texCoord = ivec2(id * fragmentation + counter, gl_WorkGroupID.x);

	// Swizzle with uniform so we don't have to branch
	texCoord = ivec2(texCoord[direction_selector], texCoord[abs(direction_selector-1)]);
	float texture_size_early_out = texture_size[direction_selector];

	cache[id] = vec4(texture(sampler0, texCoord / texture_size).xyz, texture(sampler2, texCoord / texture_size).a);
	
	barrier();
	memoryBarrierShared();

	if(id > texture_size_early_out / fragmentation)
	{
		imageStore(sampler1, texCoord, vec4(0.0));
		return;
	}

	float coc = cache[id].a / 20;
	coc = min(coc * max_blur, max_blur / 1.0);
	int num_samples = int(ceil(coc));

	if(num_samples <= 0)
	{
		imageStore(sampler1, texCoord, vec4(cache[id].xyz,1.0));
		return;
	}
	
	
	vec3 final = cache[id].xyz;


	for (int i = 1; i < num_samples; i++)
	{
		int index = i;
		ivec2 samplerCoord = ivec2(id + index, id - index);

		final += (
			(cache[samplerCoord.x].xyz) + 
			(cache[samplerCoord.y].xyz)
		);

	}

	final /= num_samples;

	imageStore(sampler1, texCoord, vec4(final, 1.0));

}


void main() 
{
	gaussian();
	//box();
}
