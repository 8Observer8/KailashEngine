


void calcLighting(
	vec2 tex_coord, 
	vec3 world_position, vec3 world_normal, 
	vec3 cam_position,
	vec3 light_position, vec3 light_color, float light_intensity, float light_falloff,
	sampler2D specular_texture,
	out vec3 L, out vec4 diffuse_out, out vec4 specular_out)
{
	
	//------------------------------------------------------
	// Lighting Vectors
	//------------------------------------------------------
	// Normal
	vec3 N = normalize(world_normal);
	// View Direction
	vec3 E = normalize(-cam_position - world_position);

	// Light to Object Vector
	vec3 light_to_object = (light_position - world_position);

	// Light to Object Distance Squared
	float light_distance_2 = dot(light_to_object, light_to_object);

	// Light to Object Distance
	float light_distance = sqrt(light_distance_2);

	// Light to Object Direction
	L = light_to_object / light_distance;

	//------------------------------------------------------
	// Attenuation
	//------------------------------------------------------
	float max_light_brightness = 1.0;
	float light_bright = (light_intensity / max_light_brightness);
	float light_falloff_2 = light_falloff * light_falloff;


	float attenuation = max(1.0 - light_distance / light_falloff, 0.0);
	attenuation *= attenuation;
	attenuation *= light_bright;


	//------------------------------------------------------
	// Angle of Inclination
	//------------------------------------------------------
	float angle_of_inc = dot(L,N);
	float max_inc = max(angle_of_inc, 0.0);

	//------------------------------------------------------
	// Diffuse
	//------------------------------------------------------
	vec4 diffuse = vec4(light_color * max_inc, 1.0);


	//------------------------------------------------------
	// Specular
	//------------------------------------------------------
	vec4 specular_properties = texture(specular_texture, tex_coord);
	float specular_shininess = specular_properties.a;
	vec3 specular_color = specular_properties.xyz;

	vec3 half_angle = normalize(L + E);

	float angleNormalHalf = acos(dot(half_angle,N));
	float exponent = angleNormalHalf * (specular_shininess * 15.0);
	exponent = -(exponent * exponent);
	float gaussianTerm = exp(exponent);

	//gaussianTerm = angle_of_inc != 0.0 ? gaussianTerm : 0.0;

	vec4 specular = vec4(0.0);
	
	if (angle_of_inc > 0)
	{
		specular = vec4(light_color *
						gaussianTerm *
						specular_color, 1.0);
	}



	//------------------------------------------------------
	// Add it all together
	//------------------------------------------------------
	diffuse_out = 
		attenuation * (
			diffuse
		);

	specular_out = 
		attenuation * (
			specular
		);


	vec3 spec;
	vec3 diff;

	//diffuse_out = vec4(attenuation * diff,1.0);
	//specular_out = vec4(light_color * spec * attenuation * specular_color, 1.0);
}